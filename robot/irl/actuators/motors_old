package junk

import (
    "github.com/spencerhhubert/go-firmata"
    u "github.com/spencerhhubert/nexus/utils"
    "time"
    "fmt"
)

type Stepper struct {
    dir_pin uint8
    step_pin uint8
    device *firmata.FirmataClient
    num uint8
}

func NewStepper(device *firmata.FirmataClient, num uint8, dir_pin uint8, step_pin uint8) *Stepper {
    device.SysEx(0x02, 0x01, num, dir_pin, step_pin)
    return &Stepper{dir_pin, step_pin, device, num}
}

//serial latency is too high to run stepper motor locally for high speeds, need this
//if speed negative then go backwards
func (s *Stepper) Run(speed float32) {
    fmt.Println(len(u.EncodeIEEE754To7BitBytes(speed)))
    args := []byte{0x02, s.num}
    args = append(args, u.EncodeIEEE754To7BitBytes(speed)...)
    s.device.SysEx(0x02, args...)
}

type VibrationMotor struct {
    pwm_pin uint8
    device *firmata.FirmataClient
}

func NewVibrationMotor(device *firmata.FirmataClient, pwm_pin uint8) *VibrationMotor {
    device.SetPinMode(pwm_pin, firmata.PWM)
    return &VibrationMotor{pwm_pin, device}
}

func (v *VibrationMotor) Run(voltage byte) {
    var pin_big_int uint = uint(v.pwm_pin)
    v.device.AnalogWrite(pin_big_int, voltage)
    time.Sleep(time.Second * 1)
}

type PCA9685 struct {
    dev *firmata.FirmataClient
    board_addr byte
    //TODO: have oscillator frequency and prescaler be set here instead of in arduino code
}

func NewPCA9685(dev *firmata.FirmataClient, board_addr byte) {
    dev.SysEx(0x01, 0x07, board_addr)
}

type Servo struct {
    dev *firmata.FirmataClient
    board_addr byte
    channel byte
    Angle uint8
}

func NewServo(dev *firmata.FirmataClient, board_addr byte, channel byte) *Servo {
    return &Servo{dev, board_addr, channel, 0}
}

func (s *Servo) SetAngle(angle uint8) {
    s.dev.SysEx(0x01, 0x08, s.board_addr, s.channel, u.UInt8To7BitBytes(angle)[0], u.UInt8To7BitBytes(angle)[1]);
    s.Angle = angle
}
